
import java.util.Comparator;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Jason
 */
    public class cpuVisualization extends javax.swing.JFrame {

        /**
         * Creates new form cpuVisualization
         */

         private List<Metrics> cpuItems;
         private List<Integer> queueQuantums;
        private List<Integer> queueAllotments;
        private String algorithm;
        private int timeQuantum, numQueues, allotment;

        JLabel[] Arrival;
        JLabel[] Burst;
        JLabel[] Completion;
        JLabel[] Turnaround;
        JLabel[] Response;
        JProgressBar[] progressBar ;
        JLabel AverageTRT;
        JLabel AverageRT;
        JLabel[] jLabelpolicy;


        public cpuVisualization(List<Metrics> cpuItems, String selected, int timeQuantum, int numQueues, int allotment,List<Integer> queueQuantums,List<Integer> queueAllotments) {

        this.cpuItems = cpuItems;
        this.algorithm = selected;
        this.timeQuantum = timeQuantum;
        this.numQueues = numQueues;
        this.allotment = allotment;
            initComponents();
            
            jLabelPolicy.setText(algorithm);
       
        AverageTRT = jLabelAverageTRT;

this.queueQuantums = queueQuantums;
this.queueAllotments = queueAllotments;
        

       SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws InterruptedException {
                runSimulation();  
                return null;
            }
        };
        worker.execute(); 
        }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabelAverageTRT = new javax.swing.JLabel();
        jLabelAverageRT = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabelPolicy = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableOutput = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        returnButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabelCurrent = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Current process:");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Average RT:");

        jLabelAverageTRT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelAverageTRT.setText("0");

        jLabelAverageRT.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelAverageRT.setText("0");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Algorithnm:");

        jLabelPolicy.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelPolicy.setText("text");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("CPU results");

        TableOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process ID", "Arrival", "Burst", "Completion", "Turnaround", "Response", "Waiting"
            }
        ));
        jScrollPane1.setViewportView(TableOutput);

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Gantt Chart:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Average TRT:");

        jLabelCurrent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelCurrent.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelAverageRT))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelAverageTRT)))
                                .addGap(95, 95, 95)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(286, 286, 286)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelCurrent)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelAverageTRT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel22))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabelAverageRT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel21))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelPolicy))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jLabelCurrent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        cpuInputs inputMenu = new cpuInputs();
        
        inputMenu.setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
 public void runSimulation() throws InterruptedException {
for (int i = 0; i < cpuItems.size(); i++) {
    cpuItems.get(i).index = i; 
}


    switch (algorithm) {
        case "FCFS" -> runFCFS();
        case "SJF" -> runSJF();
        case "SRTF" -> runSRTF();
        case "RR" -> runRR();
        case "MLFQ" -> runMLFQ();
    }
    
}
 
 

public void runFCFS() throws InterruptedException {
   cpuItems.sort(Comparator.comparingInt(m -> m.arrivalTime));
    int currentTime = 0;

    for (Metrics m : cpuItems) {
        m.startTime = -1;
    }

    for (Metrics m : cpuItems) {
        if (m.startTime == -1) {
            m.startTime = Math.max(currentTime, m.arrivalTime);
        }

        // If process arrives later than currentTime, advance time
        if (m.arrivalTime > currentTime) {
            while (currentTime < m.arrivalTime) {
                appendToGanttChart("IDLE");
                Thread.sleep(100);
                currentTime++;
            }
            m.startTime = m.arrivalTime;
        }

        for (int i = 0; i < m.burstTime; i++) {
            appendToGanttChart("PID" + (m.index + 1));
            Thread.sleep(100);
            currentTime++;
        }

        m.completionTime = currentTime;
        m.turnaroundTime = m.completionTime - m.arrivalTime;
        m.responseTime = m.startTime - m.arrivalTime;
        m.waitingTime = m.turnaroundTime - m.burstTime;
    }

    simulationUpdate();
    updateAverages();
}
 
 public void runSJF() throws InterruptedException {
   List<Metrics> processes = new ArrayList<>(cpuItems);
    List<Metrics> completed = new ArrayList<>();
    int currentTime = 0;

    while (completed.size() < cpuItems.size()) {
         final int snapshotTime = currentTime;
        List<Metrics> readyQueue = processes.stream()
            .filter(p -> p.arrivalTime <= snapshotTime && !completed.contains(p))
            .sorted(Comparator.comparingInt(p -> p.burstTime))
            .toList();

        
        if (readyQueue.isEmpty()) {
            appendToGanttChart("IDLE");
            currentTime++;
            continue;
        }

        Metrics m = readyQueue.get(0); 

        if (m.startTime == -1) {
    m.startTime = currentTime; 
}

        // Animate Gantt Chart
        for (int t = 0; t < m.burstTime; t++) {
            appendToGanttChart("PID" + (m.index + 1));
            Thread.sleep(100);
        }

        currentTime += m.burstTime;
        m.completionTime = currentTime;
        m.turnaroundTime = m.completionTime - m.arrivalTime;
        m.responseTime = m.startTime - m.arrivalTime;
        m.waitingTime = m.turnaroundTime - m.burstTime; 

        completed.add(m);
    }

    simulationUpdate();
    updateAverages();
 }
 public void runSRTF() throws InterruptedException {
     List<Metrics> processes = new ArrayList<>(cpuItems);
    int currentTime = 0;
    int completed = 0;


    for (Metrics m : processes)
        m.remainingTime = m.burstTime;

    while (completed < processes.size()) {
        int snapshotTime = currentTime;
        List<Metrics> readyQueue = processes.stream()
            .filter(m -> m.arrivalTime <= snapshotTime && m.remainingTime > 0)
            .collect(Collectors.toList());

        if (readyQueue.isEmpty()) {
        appendToGanttChart("IDLE");
        currentTime++;
        continue;
    }

        Metrics current = readyQueue.stream()
            .min(Comparator.comparingInt(m -> m.remainingTime))
            .get();
        

        if (current.startTime == -1)
            current.startTime = currentTime;

        current.remainingTime--;
        appendToGanttChart("PID" + (current.index + 1));
        currentTime++;

        if (current.remainingTime == 0) {
            current.completionTime = currentTime;
            current.turnaroundTime = current.completionTime - current.arrivalTime;
            current.responseTime = current.startTime - current.arrivalTime;
            current.waitingTime = current.turnaroundTime - current.burstTime; 
            completed++;
        }
    }
    simulationUpdate();
    updateAverages();
}
 
 public void runRR() throws InterruptedException {
     int currentTime = 0;
    int completed = 0;
    int usedAllotment = 0;
    int level = 0;
    Queue<Metrics> queue = new LinkedList<>();
    List<Metrics> processes = new ArrayList<>(cpuItems);

    // Initialize
    for (Metrics m : processes) {
        m.remainingTime = m.burstTime;
        m.startTime = -1;
    }
        

    while (completed < processes.size()) {
        // Add newly arrived processes to the queue
        for (Metrics m : processes) {
            if (m.arrivalTime <= currentTime && m.remainingTime > 0 && !queue.contains(m)) {
                queue.add(m);
            }
        }

        if (queue.isEmpty()) {
            currentTime++;
            continue;
        }

        Metrics current = queue.poll();

        if (current.startTime == -1)
            current.startTime = currentTime;

        int execTime = Math.min(timeQuantum, current.remainingTime);

        for (int i = 0; i < execTime; i++) {
            if (current.remainingTime <= 0) break;

            current.remainingTime--;    
            appendToGanttChart("PID" + (current.index + 1));
             Thread.sleep(100);
            currentTime++;

    
            for (Metrics m : processes) {
                if (m.arrivalTime <= currentTime && m.remainingTime > 0 && !queue.contains(m) && m != current) {
                    queue.add(m);
                }
            }
        }
        
        if (++usedAllotment >= allotment) {
    if (level + 1 < numQueues) {
        current.queueLevel++;
    }
    usedAllotment = 0;
}

        if (current.remainingTime == 0) {
            current.completionTime = currentTime;
            current.turnaroundTime = current.completionTime - current.arrivalTime;
            current.responseTime = current.startTime - current.arrivalTime;
            current.waitingTime = current.turnaroundTime - current.burstTime; 
            
            completed++;
        } else {
            queue.add(current); 
        }
    }
    simulationUpdate();
    updateAverages();
}
 
 public void runMLFQ() throws InterruptedException {
    int currentTime = 0, completed = 0;
    int boostInterval = 50;
    int timeSinceLastBoost = 0;

    List<Queue<Metrics>> queues = new ArrayList<>();
    for (int i = 0; i < numQueues; i++) queues.add(new LinkedList<>());

    Map<Metrics, Integer> usedAllotment = new HashMap<>();
    Set<Metrics> inQueues = new HashSet<>();
    List<Metrics> processes = cpuItems;

    for (Metrics m : processes) {
        m.remainingTime = m.burstTime;
        m.startTime = -1;
        m.queueLevel = 0;
        usedAllotment.put(m, 0);
    }

    while (completed < processes.size()) {
        // Enqueue newly arrived processes (only once)
        for (Metrics m : processes) {
            if (m.arrivalTime <= currentTime && m.remainingTime > 0 && !inQueues.contains(m)) {
                queues.get(m.queueLevel).offer(m);
                inQueues.add(m);
            }
        }

        // Periodic priority boost
        if (timeSinceLastBoost >= boostInterval) {
            for (Metrics m : processes) {
                if (m.remainingTime > 0) {
                    m.queueLevel = 0;
                    usedAllotment.put(m, 0);
                }
            }
            for (Queue<Metrics> q : queues) q.clear();
            inQueues.clear();
            for (Metrics m : processes) {
                if (m.remainingTime > 0 && m.arrivalTime <= currentTime) {
                    queues.get(0).offer(m);
                    inQueues.add(m);
                }
            }
            timeSinceLastBoost = 0;
        }

        Metrics current = null;
        int level = -1;
        for (int i = 0; i < numQueues; i++) {
            if (!queues.get(i).isEmpty()) {
                current = queues.get(i).poll();
                inQueues.remove(current);
                level = i;
                break;
            }
        }

        if (current == null) {
            appendToGanttChart("IDLE");
            currentTime++;
            timeSinceLastBoost++;
            continue;
        }

        if (current.startTime == -1) {
            current.startTime = currentTime;
        }

        int quantum = queueQuantums.get(level);
        int allotment = queueAllotments.get(level);
        int used = usedAllotment.get(current);
        int execTime = Math.min(Math.min(quantum, allotment - used), current.remainingTime);

        for (int i = 0; i < execTime; i++) {
            appendToGanttChart("P" + level + " PID" + (current.index + 1));
            current.remainingTime--;
            currentTime++;
            timeSinceLastBoost++;
        }

        usedAllotment.put(current, used + execTime);

        if (current.remainingTime == 0) {
            current.completionTime = currentTime;
            current.turnaroundTime = current.completionTime - current.arrivalTime;
            current.responseTime = current.startTime - current.arrivalTime;
            current.waitingTime = current.turnaroundTime - current.burstTime;
            completed++;
        } else {
            if (usedAllotment.get(current) >= allotment && level + 1 < numQueues) {
                current.queueLevel = level + 1;
                usedAllotment.put(current, 0);
            }
            queues.get(current.queueLevel).offer(current);
            inQueues.add(current);
        }
    }

    simulationUpdate();
    updateAverages();
 }

 private void updateAverages() {
    double RTtotal = 0;
    double TRTtotal = 0;

    for (Metrics m : cpuItems) {
        RTtotal += m.responseTime;
        TRTtotal += m.turnaroundTime;
    }

    double avgRT = RTtotal / cpuItems.size();
    double avgTRT = TRTtotal / cpuItems.size();

   SwingUtilities.invokeLater(() -> {
    jLabelAverageRT.setText(String.format("%.2f", avgRT));
    jLabelAverageTRT.setText(String.format("%.2f", avgTRT));
});
   
}
 
    public void simulationUpdate() {       
   
    DefaultTableModel model = (DefaultTableModel) TableOutput.getModel();
    model.setRowCount(0); 

    for (Metrics m : cpuItems) {
        Object[] row = {
            "P" + (m.index + 1),
            m.arrivalTime,
            m.burstTime,
            m.completionTime,
            m.turnaroundTime,
            m.responseTime,
            m.waitingTime    
        };
        model.addRow(row);
    }
    updateAverages();  
    jLabelPolicy.setText(algorithm);
    
    
}
    
private void appendToGanttChart(String pid) {
     SwingUtilities.invokeLater(() -> {
        String currentText = jTextArea1.getText();
        jTextArea1.setText(currentText + "| " + pid + " ");
    });
}

    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cpuVisualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cpuVisualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cpuVisualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cpuVisualization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableOutput;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabelAverageRT;
    private javax.swing.JLabel jLabelAverageTRT;
    private javax.swing.JLabel jLabelCurrent;
    private javax.swing.JLabel jLabelPolicy;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton returnButton;
    // End of variables declaration//GEN-END:variables
}
