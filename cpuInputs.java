

import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Jason
 */
public class cpuInputs extends javax.swing.JFrame {

    /**
     * Creates new form cpuInputs
     */
    JTextField[] arrivalContainer;
    JTextField[] burstContainer;
    int processCount;
 
    
    List<Metrics> cpuItems = new ArrayList<>();
    int currentProcess = 1;
    
    //arrival count
    JTextField arrivalTime1;
    JTextField arrivalTime2;
    JTextField arrivalTime3;
    JTextField arrivalTime4;
    JTextField arrivalTime5;
    JTextField arrivalTime6;
    JTextField arrivalTime7;
    JTextField arrivalTime8;
    JTextField arrivalTime9;
    JTextField arrivalTime10;
    
    
    //burst count
    JTextField burstTime1;
    JTextField burstTime2;
    JTextField burstTime3;
    JTextField burstTime4;
    JTextField burstTime5;
    JTextField burstTime6;
    JTextField burstTime7;
    JTextField burstTime8;
    JTextField burstTime9;
    JTextField burstTime10;
    
    
    ;
    
    public cpuInputs() {
      initComponents();  // must come first
       cpuItems = new ArrayList<>();
        currentProcess = 1;
        
      
    policySelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
        "FCFS", "SJF", "SRTF", "RR", "MLFQ"
    }));
        
    arrivalContainer = new JTextField[]{
        arrivalTime1, arrivalTime2, arrivalTime3, arrivalTime4, arrivalTime5,
        arrivalTime6, arrivalTime7, arrivalTime8, arrivalTime9, arrivalTime10
    };

    burstContainer = new JTextField[]{
        burstTime1, burstTime2, burstTime3, burstTime4, burstTime5,
        burstTime6, burstTime7, burstTime8, burstTime9, burstTime10
    };

    
  
  
    initSetcomponents();
    timeSlice1.setEnabled(false);
    allotmentTime.setEnabled(false);

}
   
    
    
    
    
    private void initSetcomponents(){
    /*
        
        */
         beginButton.addActionListener(this::beginButtonActionPerformed);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numberOfProcesses = new javax.swing.JLabel();
        BurstTime = new javax.swing.JLabel();
        ArrivalTime = new javax.swing.JLabel();
        numberProcesses = new javax.swing.JTextField();
        burstTime = new javax.swing.JTextField();
        arrivalTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        timeSlice1 = new javax.swing.JTextField();
        allotmentTime = new javax.swing.JTextField();
        policySelect = new javax.swing.JComboBox<>();
        beginButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        inputButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableInputs = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TimeQuantums = new javax.swing.JTable();
        priorityButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        numberOfProcesses1 = new javax.swing.JLabel();
        numProcessField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CPU simulation");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Inputs");

        numberOfProcesses.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        numberOfProcesses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numberOfProcesses.setText("Process ID");

        BurstTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BurstTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BurstTime.setText("Burst time");

        ArrivalTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ArrivalTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArrivalTime.setText("Arrival time");

        numberProcesses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberProcessesActionPerformed(evt);
            }
        });

        burstTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                burstTimeActionPerformed(evt);
            }
        });

        arrivalTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrivalTimeActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Time slice");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Allotment time");

        timeSlice1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSlice1ActionPerformed(evt);
            }
        });

        allotmentTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allotmentTimeActionPerformed(evt);
            }
        });

        policySelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF", "SRTF", "RR", "MLFQ" }));
        policySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                policySelectActionPerformed(evt);
            }
        });

        beginButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        beginButton.setText("Begin");
        beginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginButtonActionPerformed(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        inputButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        inputButton.setText("Input");
        inputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Algorithms");

        TableInputs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process ID", "Arrival", "Burst"
            }
        ));
        jScrollPane1.setViewportView(TableInputs);

        TimeQuantums.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Queue", "Time slice", "Allotment"
            }
        ));
        jScrollPane2.setViewportView(TimeQuantums);

        priorityButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        priorityButton.setText("Queue");
        priorityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityButtonActionPerformed(evt);
            }
        });

        generateButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        numberOfProcesses1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        numberOfProcesses1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numberOfProcesses1.setText("Number of processes");

        numProcessField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numProcessFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(187, 187, 187)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(priorityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(55, 55, 55)
                                        .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(BurstTime, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(243, 243, 243)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(allotmentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(timeSlice1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(numberOfProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(17, 17, 17)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(numberOfProcesses1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(81, 81, 81)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(numProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(numberProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(arrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(burstTime, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(91, 91, 91)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(9, 9, 9)
                                            .addComponent(generateButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(beginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(44, 44, 44)
                                            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(38, 38, 38)
                                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(46, 46, 46))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(policySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numberOfProcesses1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberOfProcesses, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(burstTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BurstTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timeSlice1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(allotmentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33)))
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(policySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priorityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numberProcessesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberProcessesActionPerformed
        //  int processes = Integer.parseInt(processInput.getText());
    }//GEN-LAST:event_numberProcessesActionPerformed

    private void burstTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_burstTimeActionPerformed
        //   int burst = Integer.parseInt(burstInput.getText());
    }//GEN-LAST:event_burstTimeActionPerformed

    private void arrivalTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivalTimeActionPerformed
        // int arrival = Integer.parseInt(arrivalInput.getText());
    }//GEN-LAST:event_arrivalTimeActionPerformed

    private void timeSlice1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeSlice1ActionPerformed
       // int timeSlice = Integer.parseInt(timeSliceInput.getText());

    }//GEN-LAST:event_timeSlice1ActionPerformed

    private void allotmentTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allotmentTimeActionPerformed
        //int allotment = Integer.parseInt(allotmentTimeInput.getText());
    }//GEN-LAST:event_allotmentTimeActionPerformed

    private void policySelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_policySelectActionPerformed
        
        String selected = (String) policySelect.getSelectedItem();

    boolean isRR = selected.equals("RR");
    boolean isMLFQ = selected.equals("MLFQ");

    timeSlice1.setEnabled(isRR || isMLFQ);  // both RR and MLFQ use time/allotment inputs
    allotmentTime.setEnabled(isRR || isMLFQ);
    priorityButton.setEnabled(isMLFQ);
    TimeQuantums.setEnabled(isMLFQ);
      
    }//GEN-LAST:event_policySelectActionPerformed

    private void beginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginButtonActionPerformed
    if (cpuItems.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please add at least one process.");
        return;
    }

    for (int i = 0; i < cpuItems.size(); i++) {
        cpuItems.get(i).index = i;
    }

    String selected = (String) policySelect.getSelectedItem();
    int timeQuantum = 0;
    int allotment = 0;
    int numQueues = 0;

  
    List<Integer> queueQuantums = new ArrayList<>();
    List<Integer> queueAllotments = new ArrayList<>();

    if (selected.equals("MLFQ")) {
        DefaultTableModel model = (DefaultTableModel) TimeQuantums.getModel();
        numQueues = model.getRowCount(); // usually 4

        for (int i = 0; i < numQueues; i++) {
            try {
                queueQuantums.add(Integer.parseInt(model.getValueAt(i, 1).toString()));
                queueAllotments.add(Integer.parseInt(model.getValueAt(i, 2).toString()));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid quantum/allotment at row " + (i + 1));
                return;
            }
        }
    } else if (selected.equals("RR")) {
        try {
            timeQuantum = Integer.parseInt(timeSlice1.getText().trim());
            allotment = Integer.parseInt(allotmentTime.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers for time slice and allotment.");
            return;
        }
    }

 
    cpuVisualization visual = new cpuVisualization(cpuItems, selected, timeQuantum, numQueues, allotment, queueQuantums, queueAllotments);
    visual.setVisible(true);

    SwingWorker<Void, Void> worker = new SwingWorker<>() {
        @Override
        protected Void doInBackground() throws Exception {
            visual.runSimulation();
            return null;
        }
    };
    worker.execute();

    dispose();  // Close the input frame
    }//GEN-LAST:event_beginButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        numberProcesses.setText("");
        burstTime.setText("");
        arrivalTime.setText("");
        timeSlice1.setText("");
        allotmentTime.setText("");      
        policySelect.setSelectedIndex(0);
        
        DefaultTableModel model = (DefaultTableModel) TableInputs.getModel();
    model.setRowCount(0);
    cpuItems.clear();
    currentProcess = 1;
        
    }//GEN-LAST:event_resetButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
               dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void inputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputButtonActionPerformed
        if (cpuItems.size() > 10) {
        JOptionPane.showMessageDialog(this, "Maximum of 10 processes allowed.");
        return;
    }
            
      

    try {
         int pid = currentProcess;
        int arrival = Integer.parseInt(arrivalTime.getText().trim());
        int burst = Integer.parseInt(burstTime.getText().trim());
      
       
        DefaultTableModel model = (DefaultTableModel) TableInputs.getModel();
        model.addRow(new Object[]{pid, arrival, burst});

      
        cpuItems.add(new Metrics(pid, arrival, burst));
        currentProcess++;

       
        numberProcesses.setText(String.valueOf(currentProcess));
        arrivalTime.setText("");
        burstTime.setText("");

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Enter you arrival and burst inputs.");
    }
   
    
    }//GEN-LAST:event_inputButtonActionPerformed

    private void priorityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityButtonActionPerformed
          DefaultTableModel model = (DefaultTableModel) TimeQuantums.getModel();

    int currentRowCount = model.getRowCount();
    System.out.println("Current row count: " + currentRowCount); // Debug output

    if (currentRowCount >= 4) {
        JOptionPane.showMessageDialog(this, "Maximum of 4 priority queues (0–3) allowed.");
        return;
    }

    try {
        int timeQuantum = Integer.parseInt(timeSlice1.getText().trim());
        int allotment = Integer.parseInt(allotmentTime.getText().trim());

        model.addRow(new Object[]{currentRowCount, timeQuantum, allotment});

        timeSlice1.setText("");
        allotmentTime.setText("");

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid integers for time quantum and allotment.");
    }
    }//GEN-LAST:event_priorityButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
       String selectedPolicy = (String) policySelect.getSelectedItem();

    try {
        int count = Integer.parseInt(numProcessField.getText().trim());
        if (count <= 0 || count > 10) {
            JOptionPane.showMessageDialog(this, "Please enter a number between 1 and 10.");
            return;
        }

        Random rand = new Random();
        DefaultTableModel inputModel = (DefaultTableModel) TableInputs.getModel();

        for (int i = 0; i < count; i++) {
            int pid = currentProcess;
            int arrival = rand.nextInt(21); // 0–20
            int burst = rand.nextInt(15) + 1; // 1–15

            Metrics m = new Metrics(pid, arrival, burst);
            cpuItems.add(m);

            inputModel.addRow(new Object[]{pid, arrival, burst});
            currentProcess++;
        }

        numberProcesses.setText(String.valueOf(currentProcess));

        
        if (selectedPolicy.equals("RR")) {
            timeSlice1.setText(String.valueOf(rand.nextInt(5) + 2));   // 2–6
            allotmentTime.setText(String.valueOf(rand.nextInt(7) + 4)); // 4–10
        }

        if (selectedPolicy.equals("MLFQ")) {
            DefaultTableModel quantumModel = (DefaultTableModel) TimeQuantums.getModel();
            quantumModel.setRowCount(0); // Reset
            for (int q = 0; q < 4; q++) {
                int tq = rand.nextInt(5) + 2;   // 2–6
                int allot = rand.nextInt(7) + 4; // 4–10
                quantumModel.addRow(new Object[]{q, tq, allot});
            }
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Enter a valid number.");
    }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void numProcessFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numProcessFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numProcessFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cpuInputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cpuInputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cpuInputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cpuInputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cpuInputs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ArrivalTime;
    private javax.swing.JLabel BurstTime;
    private javax.swing.JTable TableInputs;
    private javax.swing.JTable TimeQuantums;
    private javax.swing.JTextField allotmentTime;
    private javax.swing.JTextField arrivalTime;
    private javax.swing.JButton beginButton;
    private javax.swing.JTextField burstTime;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JButton inputButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numProcessField;
    private javax.swing.JLabel numberOfProcesses;
    private javax.swing.JLabel numberOfProcesses1;
    private javax.swing.JTextField numberProcesses;
    private javax.swing.JComboBox<String> policySelect;
    private javax.swing.JButton priorityButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField timeSlice1;
    // End of variables declaration//GEN-END:variables
}
